# tag::project-config[]
[project]
name = "globalprotect-openconnect"
version = "2.4.4"
description = "A GUI for GlobalProtect VPN, based on OpenConnect, supports the SSO authentication method. CLI build AND packaging working with pixi!"
authors = ["Kevin Yue <k3vinyue@gmail.com>"]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64"]
# end::project-config[]

# tag::dependencies[]
[dependencies]
# Rust toolchain
rust = "1.80.*"
# Build tools
make = "*"
pkg-config = "*"
# System dependencies
openconnect = "*"
# GUI dependencies for GTK/Cairo
cairo = "*"
glib = "*"
gtk3 = "*"
pango = "*"
gdk-pixbuf = "*"
atk = "*"
libxml2 = "*"
# WebKit and soup dependencies
libsoup = "*"
# Missing dependency for fontconfig
expat = "*"
# Node.js for frontend
nodejs = "20.*"
# Additional build tools
perl = "*"
jq = "*"
git = "*"
# Rattler-build for packaging
rattler-build = "*"
# Documentation tools
asciidoctor = "*"
rb-asciidoctor-pdf = "*"
# end::dependencies[]

[build-dependencies]
# C compiler and build tools
c-compiler = "*"
cxx-compiler = "*"


# tag::build-tasks[]
[tasks]

[tasks.setup]
cmd = "corepack enable"
cwd = "."

[tasks.build-frontend]
cmd = "cd apps/gpgui-helper && pnpm install && pnpm build"
cwd = "."

[tasks.build-rust]
cmd = "PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig cargo build --release"
cwd = "."

[tasks.build]
depends-on = ["setup", "build-frontend", "build-rust"]

[tasks.build-cli]
cmd = "PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig cargo build --release --no-default-features -p gpclient -p gpservice -p gpauth"
cwd = "."
# end::build-tasks[]

[tasks.test-cli]
cmd = "echo 'Testing CLI binaries...' && ./target/release/gpclient --version && ./target/release/gpservice --version && ./target/release/gpauth --version"
cwd = "."

[tasks.test]
cmd = "./target/release/gpclient --help"
cwd = "."

[tasks.clean]
cmd = "cargo clean && rm -rf apps/gpgui-helper/node_modules apps/gpgui-helper/dist"
cwd = "."

[tasks.verify-pkgconfig]
cmd = "echo \"PKG_CONFIG_PATH: $PKG_CONFIG_PATH\" && echo \"CONDA_PREFIX: $CONDA_PREFIX\" && ls -la $CONDA_PREFIX/lib/pkgconfig/ | head"
cwd = "."

[tasks.package]
cmd = "rattler-build build --recipe recipe.yaml"
cwd = "."

[tasks.package-cli]
cmd = "rattler-build build --recipe recipe-cli.yaml"
cwd = "."

[tasks.inspect-package]
cmd = "cd output/linux-64 && unzip -l *.conda && echo '--- Package Contents ---' && unzip -q *.conda && tar -tf pkg-*.tar.zst"
cwd = "."

[tasks.show-package-info]
cmd = "ls -lh output/linux-64/*.conda && echo 'Package successfully built!'"
cwd = "."

[tasks.setup-dev]
cmd = "rustup component add clippy rustfmt"
cwd = "."

[tasks.lint]
cmd = "PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig cargo clippy -- -D warnings"
cwd = "."

[tasks.format]
cmd = "cargo fmt"
cwd = "."

[tasks.check-format]
cmd = "cargo fmt -- --check"
cwd = "."

[tasks.debug-pkgconfig]
cmd = "echo PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
cwd = "."

[tasks.test-pkgconfig-direct]
cmd = "PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig pkg-config --exists cairo && echo 'SUCCESS: cairo found' || echo 'FAILED: cairo not found'"
cwd = "."

[tasks.list-pkgconfig-files]
cmd = "ls $CONDA_PREFIX/lib/pkgconfig/"
cwd = "."

[tasks.test-conda-pkgconfig]
cmd = "$CONDA_PREFIX/bin/pkg-config --exists cairo"
cwd = "."

[tasks.verify-path]
cmd = "echo PATH: $PATH && which pkg-config"
cwd = "."

[tasks.test-pkgconfig-manual]
cmd = "echo 'CONDA_PREFIX is:' $CONDA_PREFIX && echo 'Setting PKG_CONFIG_PATH manually' && PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig pkg-config --exists cairo && echo 'cairo: OK' || echo 'cairo: FAIL'"
cwd = "."

[tasks.test-env-expansion]
cmd = "echo CONDA_PREFIX=$CONDA_PREFIX && echo Full-path=$CONDA_PREFIX/lib/pkgconfig && ls -la $CONDA_PREFIX/lib/pkgconfig/cairo.pc"
cwd = "."

[tasks.test-individual-deps]
cmd = "PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig pkg-config --exists zlib && echo 'zlib: OK' || echo 'zlib: FAIL'"
cwd = "."

[tasks.test-libpng-version]
cmd = "PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig pkg-config --modversion libpng"
cwd = "."

[tasks.test-freetype-version]
cmd = "PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig pkg-config --modversion freetype2"
cwd = "."

[tasks.test-cairo-deps]
cmd = "PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig pkg-config --print-requires-private cairo"
cwd = "."

[tasks.test-all-gtk-packages]
cmd = "PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig pkg-config --exists cairo && echo 'cairo: OK' || echo 'cairo: FAIL' && PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig pkg-config --exists gdk-3.0 && echo 'gdk-3.0: OK' || echo 'gdk-3.0: FAIL' && PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig pkg-config --exists pango && echo 'pango: OK' || echo 'pango: FAIL' && PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig pkg-config --exists gdk-pixbuf-2.0 && echo 'gdk-pixbuf-2.0: OK' || echo 'gdk-pixbuf-2.0: FAIL'"
cwd = "."

[tasks.verify-webkit-deps]
cmd = "echo 'Checking WebKit dependencies...' && PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig pkg-config --exists webkit2gtk-4.1 && echo 'webkit2gtk-4.1: OK' || echo 'webkit2gtk-4.1: MISSING' && PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/share/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig pkg-config --exists javascriptcoregtk-4.1 && echo 'javascriptcoregtk-4.1: OK' || echo 'javascriptcoregtk-4.1: MISSING' && echo 'If missing, see WebKit Dependencies section in docs/developers-guide.adoc'"
cwd = "."

# CLI development workflow - build and test - WORKING!
[tasks.dev-cli]
depends-on = ["clean", "build-cli", "test-cli"]

# CLI shipping workflow - build, test, and package - WORKING!
[tasks.ship-cli]
depends-on = [
  "clean",
  "build-cli",
  "test-cli",
  "package-cli",
  "show-package-info",
]

# CLI debug workflow - build, test, package, and inspect - WORKING!
[tasks.debug-cli]
depends-on = [
  "clean",
  "build-cli",
  "test-cli",
  "package-cli",
  "inspect-package",
]

[tasks.test-cli-comprehensive]
cmd = "chmod +x tests/test_cli_final.sh && ./tests/test_cli_final.sh"
cwd = "."

[tasks.docs-html]
cmd = "asciidoctor docs/developers-guide.adoc docs/operators-guide.adoc docs/index.adoc -D output/docs"
cwd = "."

[tasks.docs-pdf]
cmd = "asciidoctor-pdf docs/developers-guide.adoc docs/operators-guide.adoc -D output/docs"
cwd = "."

[tasks.docs]
depends-on = ["docs-html", "docs-pdf"]

[tasks.clean-docs]
cmd = "rm -rf output/docs"
cwd = "."

[tasks.view-guide-dev]
cmd = "python -c \"import webbrowser; webbrowser.open('file://' + __import__('os').path.abspath('output/docs/developers-guide.html'))\""
cwd = "."
depends-on = ["docs-html"]

[tasks.view-guide-ops]
cmd = "python -c \"import webbrowser; webbrowser.open('file://' + __import__('os').path.abspath('output/docs/operators-guide.html'))\""
cwd = "."
depends-on = ["docs-html"]

[tasks.view-docs]
cmd = "python -c \"import webbrowser; webbrowser.open('file://' + __import__('os').path.abspath('output/docs/index.html'))\""
cwd = "."
depends-on = ["docs-html"]

[tasks.install-global-cli]
cmd = [
  "bash",
  "-c",
  "if ls output/linux-64/globalprotect-openconnect-cli-*.conda >/dev/null 2>&1; then pixi global install --force-reinstall $(pwd)/$(ls output/linux-64/globalprotect-openconnect-cli-*.conda | head -n 1); else echo 'Error: No CLI conda package found. Run pixi run package-cli first.'; exit 1; fi",
]
cwd = "."

[tasks.install-global]
cmd = [
  "bash",
  "-c",
  "if ls output/linux-64/globalprotect-openconnect-*.conda >/dev/null 2>&1; then pixi global install --force-reinstall $(pwd)/$(ls output/linux-64/globalprotect-openconnect-*.conda | grep -v cli | head -n 1); else echo 'Error: No conda package found. Run pixi run package first.'; exit 1; fi",
]
cwd = "."

[tasks.deploy-cli]
depends-on = [
  "clean",
  "build-cli",
  "test-cli",
  "package-cli",
  "install-global-cli",
]

[tasks.install-workflow]
depends-on = ["clean", "build", "test", "package", "install-global"]

[tasks.show-help]
cmd = """echo "CLI Workflow Tasks:
  pixi run dev-cli                  - Development workflow: clean, build, test
  pixi run ship-cli                 - Shipping workflow: clean, build, test, package
  pixi run debug-cli                - Debug workflow: clean, build, test, package, inspect
  pixi run deploy-cli               - Deployment workflow: clean, build, test, package, install globally

Installation Tasks:
  pixi run package-cli              - Build CLI conda package
  pixi run package                  - Build full conda package (with GUI)
  pixi run install-global-cli       - Install CLI package to pixi global (force reinstall)
  pixi run install-global           - Install full package to pixi global (force reinstall)
  pixi run install-workflow         - Complete workflow: clean, build, test, package, and install full package globally

Package location: output/linux-64/
After installation: CLI tools available globally as gpclient, gpservice, gpauth

Notes:
- Global install uses --force-reinstall to ensure latest package is installed
- Full GUI package requires webkit2gtk system packages (see docs/sects/webkit-status.adoc)
- On Fedora Silverblue/Bluefin: sudo rpm-ostree install webkit2gtk4.1-devel gtk3-devel cairo-devel gdk-pixbuf2-devel pango-devel"
"""
cwd = "."

[tasks.show-docs-help]
cmd = """echo "Documentation Tasks:
  pixi run docs          - Build both HTML and PDF documentation
  pixi run docs-html     - Build HTML documentation only
  pixi run docs-pdf      - Build PDF documentation only
  pixi run clean-docs    - Clean documentation output directory

  pixi run view-docs     - Open main documentation index in browser
  pixi run view-guide-dev - Open developer's guide in browser
  pixi run view-guide-ops - Open operator's guide in browser

Output directory: output/docs/"
"""
cwd = "."

[environments]
# Default environment
default = { solve-group = "default" }
# CLI-only environment
cli = { solve-group = "cli" }
# Development environment
dev = { solve-group = "dev" }
