/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p gpservice_interface.h: ../GPService/gpservice.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef GPSERVICE_INTERFACE_H
#define GPSERVICE_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.yuezk.qt.GPService
 */
class ComYuezkQtGPServiceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.yuezk.qt.GPService"; }

public:
    ComYuezkQtGPServiceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~ComYuezkQtGPServiceInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> connect(const QString &server, const QString &username, const QString &passwd, const QString &extraArgs)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(server) << QVariant::fromValue(username) << QVariant::fromValue(passwd) << QVariant::fromValue(extraArgs);
        return asyncCallWithArgumentList(QStringLiteral("connect"), argumentList);
    }

    inline QDBusPendingReply<> disconnect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("disconnect"), argumentList);
    }

    inline QDBusPendingReply<int> status()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("status"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void connected();
    void disconnected();
    void logAvailable(const QString &log);
};

namespace com {
  namespace yuezk {
    namespace qt {
      typedef ::ComYuezkQtGPServiceInterface GPService;
    }
  }
}
#endif
